{"version":3,"sources":["webpack:///./task1.js","webpack:///./task2.js","webpack:///./task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","onSuccess","onError","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAGMA,EAAQ,SAAAC,GAEd,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACRD,EAAQF,KACRA,OAKDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCfXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAACC,GAKlBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC7BnC,IAIMe,EAAkB,SAAAC,GAGtB,OAAO,IAAInB,SAAQ,SAACoB,EAAWC,GAC7B,IAR+BC,EAAKC,EAQ9BzB,GARyBwB,EAQS,IARJC,EAQS,IAPxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IASlDpB,YAAW,WACUsB,KAAKE,SAAW,GAEjCN,EAAUD,EAAYQ,GAAI7B,GAE1BuB,EAAQF,EAAYQ,MAErB7B,OAKD8B,EAAa,SAACD,EAAIvB,GACtBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAMFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAClCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAClCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAClCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAIlCb,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.308af875a321bb82970f.js","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n// ===========================\r\nreturn new Promise((resolve) => {\r\n    setTimeout(() => {\r\n       resolve(ms);\r\n    }, ms);\r\n  });\r\n// ===========================\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\n//  а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve) => {\r\n\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  }); \r\n};\r\n  \r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n \r\n\r\n  return new Promise((onSuccess, onError) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {    \r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        onSuccess(transaction.id, delay);\r\n      } else {\r\n        onError(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n  \r\n};\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}